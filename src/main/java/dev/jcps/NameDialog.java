package dev.jcps;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

/**
 * Represents a dialog box for entering a name for a new high score.
 * <p>
 * This class extends the {@code Dialog} class and implements the {@code WindowListener} and {@code ActionListener} interfaces.
 * The dialog allows users to enter their name for a new high score.
 * </p>
 * <p>
 * The dialog provides fields for setting the coordinates, width, and height of the dialog box.
 * It also includes constants for default background, foreground, and font settings.
 * </p>
 *
 * @since 1.0
 */
class NameDialog extends Dialog implements WindowListener, ActionListener {
    /**
     * The x-coordinate for the initial position of the dialog box.
     */
    public static final int CO_ORD_X = 150;

    /**
     * The y-coordinate for the initial position of the dialog box.
     */
    public static final int CO_ORD_Y = 150;

    /**
     * The width of the dialog box.
     */
    public static final int WIDTH = 200;

    /**
     * The height of the dialog box.
     */
    public static final int HEIGHT = 300;

    /**
     * The default background color for the dialog box.
     */
    private static final Color DEFAULT_BACKGROUND;

    /**
     * The default foreground color for the dialog box.
     */
    private static final Color DEFAULT_FOREGROUND;

    /**
     * The default font for text in the dialog box.
     */
    private static final Font DEFAULT_FONT;

    static {
        DEFAULT_BACKGROUND = new Color(0, 96, 0);
        DEFAULT_FOREGROUND = Color.white;
        DEFAULT_FONT = new Font("Serif", Font.BOLD, 18);
    }

    /**
     * The background color of the dialog box.
     */
    private final Color background;

    /**
     * The foreground color of the dialog box.
     */
    private final Color foreground;

    /**
     * The text field for entering the name.
     */
    private final TextField field;

    /**
     * The name entered by the user.
     */
    private String name;

    /**
     * Constructs a new NameDialog object with the specified owner frame and initial text.
     *
     * @param owner The frame that owns the dialog.
     * @param text  The initial text to display in the dialog.
     */
    public NameDialog(final Frame owner, String text) {
        super(owner, "New High Score!", false);
        this.background = NameDialog.DEFAULT_BACKGROUND;
        this.foreground = NameDialog.DEFAULT_FOREGROUND;
        this.setBounds(CO_ORD_X, CO_ORD_Y, WIDTH, HEIGHT);
        this.setFont(NameDialog.DEFAULT_FONT);
        this.setBackground(this.background);
        this.setForeground(this.foreground);
        (this.field = new TextField(20)).setText(text);
        this.field.setBackground(this.foreground);
        this.field.setForeground(Color.black);
        //text = text;
        this.field.addActionListener(this);
        this.setLayout(new GridBagLayout());
        final GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        gridBagConstraints.fill = 0;
        gridBagConstraints.anchor = 17;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.gridheight = 1;
        this.add(new Label("Your Name: "), gridBagConstraints);
        ++gridBagConstraints.gridy;
        this.add(this.field, gridBagConstraints);
        this.pack();
    }

    /**
     * Handles action events triggered by the text field in the dialog.
     *
     * @param actionEvent The action event generated by the text field.
     */
    public void actionPerformed(final ActionEvent actionEvent) {
        if (actionEvent.getSource() == this.field) {
            this.name = this.field.getText();
            this.setVisible(false);
            this.setModal(false);
        }
    }

    /**
     * Retrieves the name entered by the user in the dialog.
     *
     * @return The name entered by the user.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Handles the window closing event.
     *
     * @param windowEvent The window event generated by closing the dialog.
     */
    public void windowClosing(final WindowEvent windowEvent) {
        this.setVisible(false);
        this.setModal(false);
    }

    public void windowClosed(final WindowEvent windowEvent) {
    }

    public void windowOpened(final WindowEvent windowEvent) {
    }

    public void windowIconified(final WindowEvent windowEvent) {
    }

    public void windowDeiconified(final WindowEvent windowEvent) {
    }

    public void windowActivated(final WindowEvent windowEvent) {
    }

    public void windowDeactivated(final WindowEvent windowEvent) {
    }

    /**
     * Retrieves the background color of the dialog.
     *
     * @return The background color of the dialog.
     */
    public Color getBackground() {
        return this.background;
    }

    /**
     * Retrieves the foreground color of the dialog.
     *
     * @return The foreground color of the dialog.
     */
    public Color getForeground() {
        return this.foreground;
    }
}
